apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-gateway
  annotations:
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    alb.ingress.kubernetes.io/target-type: "ip"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/certificate-arn: "${ACM_CERTIFICATE_ARN}"
    alb.ingress.kubernetes.io/healthcheck-path: "/health"
    alb.ingress.kubernetes.io/success-codes: "200"
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "15"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
spec:
  rules:
  - host: "api.${DOMAIN_NAME}"
    http:
      paths:
      - path: /api/auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 80
      - path: /api/documents
        pathType: Prefix
        backend:
          service:
            name: document-service
            port:
              number: 80
      - path: /api/collaboration
        pathType: Prefix
        backend:
          service:
            name: document-service
            port:
              number: 80
      - path: /api/chats
        pathType: Prefix
        backend:
          service:
            name: chat-service
            port:
              number: 80
      - path: /api/messages
        pathType: Prefix
        backend:
          service:
            name: chat-service
            port:
              number: 80
      - path: /socket.io
        pathType: Prefix
        backend:
          service:
            name: chat-service
            port:
              number: 80
  - host: "${DOMAIN_NAME}"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-load-balancer-controller-config
data:
  # AWS region where the load balancer will be provisioned
  region: "${AWS_REGION}"
  # VPC ID where the load balancer will be provisioned
  vpcId: "${VPC_ID}"
  # Subnets where the load balancer will be provisioned
  subnets: "${SUBNET_IDS}"
  # Security groups to attach to the load balancer
  securityGroups: "${SECURITY_GROUP_IDS}"